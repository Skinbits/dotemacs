;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(face-name-history minibuffer-history ido-buffer-history ido-file-history extended-command-history file-name-history))
(setq face-name-history '("all faces"))
(setq minibuffer-history '("45" "x-select-request-type" "/usr/local/bin/zsh"))
(setq ido-buffer-history '("startup.el" "*ansi-term*" "migrate.rb" "startup.el" "migrate.rb" "startup.el" "migrate.rb" "*Packages*" "startup.el"))
(setq ido-file-history '(".zshrc" "migrate.rb"))
(setq extended-command-history '("describe-variable" "flycheck-list-errors" "package-list-packages" "customize-face" "smartparens-mode" "electric-pair-mode" "package-list-packages" "smartparens-mode" "package-list-packages" "ansi-term" "package-list-packages"))
(setq file-name-history '("/Users/pedro/.zshrc" "/Users/pedro/Projects/migrations/migrate.rb" "~/.emacs.d/startup.el"))
(setq kill-ring '(#("defvar" 0 6 (fontified t face font-lock-keyword-face)) #("      mac-pass-command-to-system t
      mac-pass-control-to-system t)
" 0 34 (fontified t) 34 35 (fontified t) 35 70 (fontified t) 70 71 (fontified t)) #("mac-option-key-is-meta t
" 0 24 (fontified t) 24 25 (fontified t)) #("(setq desktop-dirname \"~/.emacs.d/\")
(setq desktop-base-file-name \"emacs-desktop\")

" 0 22 (fontified t) 22 35 (fontified t face font-lock-string-face) 35 36 (fontified t) 36 37 (fontified t) 37 66 (fontified t) 66 81 (face font-lock-string-face fontified t) 81 82 (fontified t rear-nonsticky t) 82 83 (fontified t) 83 84 (fontified t)) #("(setq desktop-path '(\"~/.emacs.d/\"))" 0 21 (fontified t) 21 34 (fontified t face font-lock-string-face) 34 36 (fontified t)) "(setq desktop-path '(\"~/.emacs.d/\"))
(setq desktop-dirname \"~/.emacs.d/\")
(setq desktop-base-file-name \"emacs-desktop\")" "(add-hook 'after-init-hook #'global-flycheck-mode)" "" "(global-set-key [home] 'smart-beginning-of-line)
(global-set-key (kbd \"C-a\") 'smart-beginning-of-line)" ";; \"smart\" home, i.e., home toggles b/w 1st non-blank character and 1st column
(defun smart-beginning-of-line ()
  \"Move point to first non-whitespace character or beginning-of-line.\"
  (interactive \"^\") ; Use (interactive \"^\") in Emacs 23 to make shift-select work
  (let ((oldpos (point)))
    (back-to-indentation)
    (and (= oldpos (point))
         (beginning-of-line))))" #("(global-set-key (kbd \"C-c C-c\"))" 0 1 (fontified t) 1 16 (fontified t) 16 21 (fontified t) 21 30 (fontified t face font-lock-string-face) 30 31 (fontified t) 31 32 (fontified t)) #("(global-set-key (kbd \"C-c C-c\") 'comment-region)" 0 21 (fontified t face font-lock-comment-face) 21 30 (fontified t face font-lock-comment-face) 30 48 (fontified t face font-lock-comment-face)) "(defun comment-or-uncomment-region-or-line ()
  \"Like comment-or-uncomment-region, but if there's no mark \\(that means no
region\\) apply comment-or-uncomment to the current line\"
  (interactive)
  (if (not mark-active)
      (comment-or-uncomment-region
       (line-beginning-position) (line-end-position))
    (if (< (point) (mark))
        (comment-or-uncomment-region (point) (mark))
      (comment-or-uncomment-region (mark) (point)))))" #("  id = docs[value]
" 0 7 (fontified t) 7 11 (fontified t) 11 18 (fontified t) 18 19 (fontified t)) #("    
" 0 5 (fontified t)) #("result << id" 0 12 (fontified t)) #("fia" 0 3 (fontified t)) #("lter = " 0 7 (fontified t)) #("count = " 0 8 (fontified t)) #("puts ARGV
puts ARGV.length
" 0 4 (face font-lock-builtin-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 14 (fontified t face font-lock-builtin-face) 14 15 (fontified t) 15 19 (fontified t face font-lock-type-face) 19 20 (fontified t) 20 26 (fontified t) 26 27 (fontified t)) #("\\\"\\\"\\\"\\\"" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) #("\\\"\\\"" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) #("(global-set-key (kbd \"M-x\") 'smex)" 0 21 (fontified t) 21 26 (fontified t face font-lock-string-face) 26 28 (fontified t) 28 33 (fontified t face font-lock-string-face) 33 34 (fontified t rear-nonsticky t face font-lock-string-face)) "(global-set-key (kbd \"M-x\") 'smex)"))
(setq search-ring '("desktop-dirname" "x-select" "flymake" "hl-lin" "hl-" "hl-lin" "home" "C-c" "projectile" "smartparens" "source" "smex"))
(setq regexp-search-ring 'nil)
